

if(console && console.log)
{
    println = console.log
    eval("function println(...args){ console.log(...args) }")
    eval("function dec2hex(n){if(n<0){n=(4294967295 + n + 1);};return n.toString(16);}")
}
else
{
    eval("dec2hex = (n)=>{ return \"%x\".format(n) }")
}


var S11 =  7
var S12 = 12
var S13 = 17
var S14 = 22
var S21 =  5
var S22 =  9
var S23 = 14
var S24 = 20
var S31 =  4
var S32 = 11
var S33 = 16
var S34 = 23
var S41 =  6
var S42 = 10
var S43 = 15
var S44 = 21

function mod32bits(x)
{
    return (x & 4294967295)
}

function F(x, y, z)
{
    return (((x & y) | (~x & z)))
}

function G(x, y, z)
{
    return ((x & z) | (y & ~z))
}

function H(x, y, z)
{
    return (x ^ (y ^ z))
}

function I(x, y, z)
{
    return (y ^ (x | ~z))
}

function ROTATE_LEFT(x, n)
{
    return (mod32bits(x << n) | (x >> (32 - n)))
}

function FF(a, b, c, d, x, s, ac)
{
    var fv = F(b, c, d)
    a = mod32bits(a + fv + x + ac)    
    a = ROTATE_LEFT(a, s)
    a = mod32bits(a + b)
    return a
}

function GG(a, b, c, d, x, s, ac)
{
    a = mod32bits(a + G(b, c, d) + x + ac)
    a = ROTATE_LEFT(a, s)
    a = mod32bits(a + b)
    return a
}

function HH(a, b, c, d, x, s, ac)
{
    a = mod32bits(a + H(b, c, d) + x + ac)
    a = ROTATE_LEFT(a, s)
    a = mod32bits(a + b)
    return a
}

function II(a, b, c, d, x, s, ac)
{
    a = mod32bits(a + I(b, c, d) + x + ac)
    a = ROTATE_LEFT(a, s)
    a = mod32bits(a + b)
    return a
}



// our md5 implementation
function md5(input)
{
    // convert the input into an array of bytes using ord() on each
    // character.
    var i
    var j
    var hi
    var lo
    var words = []
    var chars = []
    var bytes = []
    for(i=0;i<input.length; i++)
    {
        chars.push(input[i])
        bytes.push(input.charCodeAt(i))
    }
    //println("chars=", chars.length)
    var nbytes = bytes.length
    //println("bytes(", bytes.length, ")=", bytes)
    // convert the array of bytes into an array of 32-bits words.
    // NOTE: words is 0-indexed.
    for (i = 1; i <= nbytes; i += 4)
    {
        var b0 = 0
        var b1 = 0
        var b2 = 0
        var b3 = 0
        if((i + 0) < bytes.length)
            b0 = bytes[i + 0]
        if((i + 1) < bytes.length)
            b1 = bytes[i + 1]
        if((i + 2) < bytes.length)
            b2 = bytes[i + 2]
        if((i + 3) < bytes.length)
            b3 = bytes[i + 3]
        hi = ((b3 << 8) | b2)
        lo = ((b1 << 8) | b0)
        words.push((hi << 16) | lo)
    }
    var nwords = words.length
    // Step 1. Append Padding Bits
    if(nbytes % 4 == 0)
    {
        words.push(128)
        nwords++
    }
    else
    {
        words[nwords - 1] = (words[nwords - 1] | (128 << (nbytes % 4) * 8))
    }
    // "fill" the remaining bytes with 0 until we're just shy two words of
    // having 16-Word Blocks.
    while ((nwords % 16) != 14)
    {
        nwords++;
    }
    // Step 2. Append Length
    hi = ((nbytes * 8) >> 32)
    lo = (nbytes * 8) - (hi << 32)
    words.push(lo)
    nwords++
    words.push(mod32bits(hi)) // truncate to 32 bits
    nwords++
    // Step 3. Initialize MD Buffer
    var x = Array(128, 0)
    var state = [0, 0, 0, 0, 0]
    state[0] = 1732584193
    state[1] = 4023233417
    state[2] = 2562383102
    state[3] = 271733878

    // Step 4. Process Message in 16-Word Blocks
    // Process each 16-word block.
    for (i = 0; i < nwords; i += 16)
    {
        // Copy block i into x.
        for (j = 0; j < 16; j++)
        {
            var v = 0
            if((i + j) < words.length)
            {
                v = words[i+j]
            }
            x[j] = v
        }
        var a = state[0]
        var b = state[1]
        var c = state[2]
        var d = state[3]
        // Round 1
        a = FF(a, b, c, d, x[ 0], S11, 3614090360)
        d = FF(d, a, b, c, x[ 1], S12, 3905402710)
        c = FF(c, d, a, b, x[ 2], S13, 606105819)
        b = FF(b, c, d, a, x[ 3], S14, 3250441966)
        a = FF(a, b, c, d, x[ 4], S11, 4118548399)
        d = FF(d, a, b, c, x[ 5], S12, 1200080426)
        c = FF(c, d, a, b, x[ 6], S13, 2821735955)
        b = FF(b, c, d, a, x[ 7], S14, 4249261313)
        a = FF(a, b, c, d, x[ 8], S11, 1770035416)
        d = FF(d, a, b, c, x[ 9], S12, 2336552879)
        c = FF(c, d, a, b, x[10], S13, 4294925233)
        b = FF(b, c, d, a, x[11], S14, 2304563134)
        a = FF(a, b, c, d, x[12], S11, 1804603682)
        d = FF(d, a, b, c, x[13], S12, 4254626195)
        c = FF(c, d, a, b, x[14], S13, 2792965006)
        b = FF(b, c, d, a, x[15], S14, 1236535329)

        // Round 2
        a = GG(a, b, c, d, x[ 1], S21, 4129170786)
        d = GG(d, a, b, c, x[ 6], S22, 3225465664)
        c = GG(c, d, a, b, x[11], S23, 643717713)
        b = GG(b, c, d, a, x[ 0], S24, 3921069994)
        a = GG(a, b, c, d, x[ 5], S21, 3593408605)
        d = GG(d, a, b, c, x[10], S22,  38016083)
        c = GG(c, d, a, b, x[15], S23, 3634488961)
        b = GG(b, c, d, a, x[ 4], S24, 3889429448)
        a = GG(a, b, c, d, x[ 9], S21, 568446438)
        d = GG(d, a, b, c, x[14], S22, 3275163606)
        c = GG(c, d, a, b, x[ 3], S23, 4107603335)
        b = GG(b, c, d, a, x[ 8], S24, 1163531501)
        a = GG(a, b, c, d, x[13], S21, 2850285829)
        d = GG(d, a, b, c, x[ 2], S22, 4243563512)
        c = GG(c, d, a, b, x[ 7], S23, 1735328473)
        b = GG(b, c, d, a, x[12], S24, 2368359562)

        // Round 3
        a = HH(a, b, c, d, x[ 5], S31, 4294588738)
        d = HH(d, a, b, c, x[ 8], S32, 2272392833)
        c = HH(c, d, a, b, x[11], S33, 1839030562)
        b = HH(b, c, d, a, x[14], S34, 4259657740)
        a = HH(a, b, c, d, x[ 1], S31, 2763975236)
        d = HH(d, a, b, c, x[ 4], S32, 1272893353)
        c = HH(c, d, a, b, x[ 7], S33, 4139469664)
        b = HH(b, c, d, a, x[10], S34, 3200236656)
        a = HH(a, b, c, d, x[13], S31, 681279174)
        d = HH(d, a, b, c, x[ 0], S32, 3936430074)
        c = HH(c, d, a, b, x[ 3], S33, 3572445317)
        b = HH(b, c, d, a, x[ 6], S34,  76029189)
        a = HH(a, b, c, d, x[ 9], S31, 3654602809)
        d = HH(d, a, b, c, x[12], S32, 3873151461)
        c = HH(c, d, a, b, x[15], S33, 530742520)
        b = HH(b, c, d, a, x[ 2], S34, 3299628645)

        // Round 4
        a = II(a, b, c, d, x[ 0], S41, 4096336452)
        d = II(d, a, b, c, x[ 7], S42, 1126891415)
        c = II(c, d, a, b, x[14], S43, 2878612391)
        b = II(b, c, d, a, x[ 5], S44, 4237533241)
        a = II(a, b, c, d, x[12], S41, 1700485571)
        d = II(d, a, b, c, x[ 3], S42, 2399980690)
        c = II(c, d, a, b, x[10], S43, 4293915773)
        b = II(b, c, d, a, x[ 1], S44, 2240044497)
        a = II(a, b, c, d, x[ 8], S41, 1873313359)
        d = II(d, a, b, c, x[15], S42, 4264355552)
        c = II(c, d, a, b, x[ 6], S43, 2734768916)
        b = II(b, c, d, a, x[13], S44, 1309151649)
        a = II(a, b, c, d, x[ 4], S41, 4149444226)
        d = II(d, a, b, c, x[11], S42, 3174756917)
        c = II(c, d, a, b, x[ 2], S43, 718787259)
        b = II(b, c, d, a, x[ 9], S44, 3951481745)

        state[0] = mod32bits(state[0] + a)
        state[1] = mod32bits(state[1] + b)
        state[2] = mod32bits(state[2] + c)
        state[3] = mod32bits(state[3] + d)
    }
    println("state(", state.length, ")=", state)
    var digest = Array(17, 0)
    for (i = j = 0; j < 16; j += 4)
    {
        var a1 = (state[i] & 255)
        var a2 = ((state[i] >> 8) & 255)
        var a3 = ((state[i] >> 16) & 255)
        var a4 = ((state[i+1] >> 24) & 255)
        i++
        digest[j + 0] = a1
        digest[j + 1] = a2
        digest[j + 2] = a3
        digest[j + 3] = a4
    }
    var ret = ""
    println("digest=", digest)
    for (i = 0; i < 16; i++)
    {
        //ret = sprintf("%s%02x", ret, digest[i]);
        //ret += "%x".format(digest[i])
        ret += dec2hex( digest[i] )
    }
    return ret
}


var demo = [
  ["message digest", "f96b697d7cb7938d525a2f31aaf161d0"],
  ["", "d41d8cd98f00b204e9800998ecf8427e"],
  ["a", "0cc175b9c0f1b6a831c399e269772661"],
  ["abc", "900150983cd24fb0d6963f7d28e17f72"],
  ["abcdefghijklmnopqrstuvwxyz", "c3fcd3d76192e4007dfb496cca67e13b"],
  ["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", "d174ab98d277d9f5a5611c2c9f419d9f"],
  ["12345678901234567890123456789012345678901234567890123456789012345678901234567890", "57edf4a22be3c955ac49da2e2107b67a"]
]

for(var idx=0; idx<demo.length; idx++)
{
    var itm = demo[idx]
    var k = itm[0]
    var v = itm[1]
    var ma = md5(k)
    //ma = "blah"
    var m = ma
    //println("-- (", k, ") [", v, "] = (", ma.length, ") ", ma)
    var okstr = "FAIL"
    if(m == v)
    {
        okstr = "OK  "
    }
    println(okstr, ": \"",k, "\" => ", m, "")

}
